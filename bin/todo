#!/bin/bash

# This is a `task` decorator.

# configs ************************************************************************************
AUTO_COMMIT=1
CACHE="$XDG_CACHE_HOME/task"
DEBUG="$LOGS/task.debug"
DEBUG=0  # save settings in json
TASKCHAMPION="$TASKDATA/taskchampion.sqlite3"
EXPORT_FILE_JSON="$TASKDATA/tasks.json"
EXPORT_FILE="$TASKDATA/taskchampion.dump"
# ********************************************************************************************

# Define an associative array to store option descriptions
declare -A option_descriptions=(
    [" "]="Display at most 10 tasks"
    ["courses"]="Shows you courses"
    ["debug"]="Develop this script"
    ["help"]="Display a help message"
    ["open"]="cd to task's directory [Not implemented]"
    ["sync"]="Synchronize with Github"
    ["*"]="Any other patterns executes as task *"
)

main() {

	found=0
	commit_msg=''

  initialize
	cache last_cmd "$*"

    # COMMAND FIRST
    case "$1" in
        '')     found=1 ; task ; exit 0 ;;
        dump)   found=1 ; dump_tasks ;;
        help)   found=1 ; print_help ;;
        open)   found=1 ; open_associated_file ; exit 1 ;;
        sync)   found=1 ; synchronize ;;
        push)   found=1 ; push_to_github "Sent from $HOSTNAME" ;;
        config) found=1 ; shift ; edit_taskrc "$@" ;;
        debug)  found=1 ; shift ; edit_code "$@" ;;
        git)    found=1 ; shift ; execute_git "$@" ;;
        add)    found=1 ; shift ; add_task "$@" ; commit_msg="$@" ;;
        hide)   found=1 ; shift ; hide_tasks "$@" ;;
        postpone) found=1 ; shift; postpone_task "$@" ;;
        +)      found=1 ; shift ; add_task_interactively ; commit_msg="added task interactively" ;;
        /)      found=1 ; shift ; task "$@" ;;
    esac

	# SINGLE-ID FIRST
    case "$1" in
    	annot* | denot* | del* | done | edit | mod | purge | start | stop | undo)\
    	found=1 ; commit_msg="$@" ; execute_exceptionally "$@" ;;
    esac

    # SINGLE-ID FIRST
    case "$2" in
    	annot* | denot* | del* | done | edit |\
    	mod | purge | start | stop | undo)\
    	found=1 ; commit_msg="$@" ; execute_exceptionally "$@" ;;
    esac

    # catch-all
    case "$found" in
    	0) execute_normally "$@" ;;
      1) ;;
    esac
# 
# 	if [[ $AUTO_COMMIT -eq 1 ]]; then
# 		case "$commit_msg" in
# 		    '') >&2 echo -e 'no commit\n' ;;
# 		    *) commit "$commit_msg" ;;
# 		esac
# 	fi

	[[ $AUTO_COMMIT -eq 1 ]] && [[ -n "$commit_msg" ]] && commit "$commit_msg"

	terminate
}

# Now add functions here in alphabetical order **********************************************

add_task() {
    if [[ -z "$@" ]]; then add_task_interactively; fi
    task add "$@"
    status="$?"
    commit "added $@"
    exit "$status"
}

add_task_interactively() {
    warn "Attributes: desc, sch, wait, due, pri, recur, proj, loc, jrnl"
    warn "Use tags: admin, auto, coin, git, next, rv, vita, work, etc."
    task=$(txtin)
    task add $task
    status="$?"
    commit "added $task"
    exit "$status"
}

cache() {
  file="$CACHE/.json"
  tmp=$(mktemp)
  # yq -i ".$1 = \"$2\"" $filepostpone_task
  jq ".$1 = \"$2\"" $file > $tmp && mv $tmp $file
}

cache_get() {
  file="$CACHE/.json"
  yq ".$1" $file
}

commit() {
	GIT="git -C $TASKDATA"
	$GIT add .
	$GIT commit -m "$*"
	status="$?"
}

edit_taskrc() {
    "$EDITOR" "$TASKRC"
    exit 0
}

execute_git() {
    git -C "$DOMAIN" "$@"
    exit "$?"
}

execute_last_cmd() {
  task "$(cache_get 'last_cmd')"
}

execute_normally() {
    task "$@"
    #exit "$?"
}

execute_exceptionally() {
	task "$@"
	# execute_last_cmd
}

dump_tasks() {
	#task export > "$EXPORT_FILE_JSON" #json
	sqlite3 "$TASKCHAMPION" '.dump' > "$EXPORT_FILE"
	attempt="$?"
	echo -e "dumped tasks to $EXPORT_FILE"
	exit "$attempt"
}

hide_tasks() {
    task "$@" mod wait:$TASK_WAIT_DURATION
    warn "Tasks hidden for $TASK_WAIT_DURATION"
}

initialize() {
  create_cache
}

create_cache() {
  cachefile="$CACHE/.json"
  [[ ! -d "$CACHE" ]] && mkdir -pv "$CACHE"
  [[ ! -e "$cachefile" ]] && echo '{}' > "$cachefile"
}

set_expiring_tasks() {
  expiring_task_count=$(task +PENDING until.none: expires.any: count)
  if [[ $expiring_task_count -gt 0 ]]; then
    echo 'tasks are set to expire but until not set!'
    # task +PENDING until.none: expires.any: modify until=expires
  fi
}

list_tasks() {
	list_tasks_active
	list_tasks_other
}

list_tasks_active() {
    # if there are active tasks, display first
    task active 2>/dev/null
}

list_tasks_other() {
    out=$(task active 2>&1)
    task limit:$TASK_LIMIT
    #exit "$?"
    #if [[ "$out" == *"No matches."* ]]; then
    #    warn "No active tasks currently"
    #fi
}

mod_task_interactively() {
    if [[ $# -eq 0 ]]; then
        warn "Which ones to update?"
        targets=$( cat )
        tk \~ $targets
    else
        task next "$@"
        warn "Modify which? [DESCRIPTION, proj, tags, pri, recur, sch, due, dir, file]"
        modifications=$( cat )
        tk "$@" mod $modifications
    fi
}

postpone_task() {
  task $@ modify due:1week
}

print_help(){
    echo "
    case "$1" in
        "") list_active_tasks ;;
        config) shift ; edit_taskrc "$@" ;;
        debug)  shift ; edit_code "$@" ;;
        help)   print_help ;;
        open)   shift ; open_associated_file ; exit 1 ;;
        sync)   synchronize ;;
        push)   push_to_github "Sent from $HOSTNAME" ;;
        git | -g) shift ; execute_git "$@" ;;
        +) shift; add_task_interactively ;;
        # mod) shift; mod_task_interactively "@" ;; # doesn't work
    esac

    # shortcuts
    case "$1" in
        courses) show_courses ;;
        todo) list_scheduled_today ;;
    esac

    # catch-all
    case "$1" in
        *) execute_and_push "$@" ;;
    esac"
}

# Help function to display usage information and option descriptions
# print_help() {
#     # ANSI color codes for colors without using \e[33m and \e[31m
#     GREEN='\033[0;32m'
#     BLUE='\033[0;34m'
#     NC='\033[0m' # No Color

#     echo "Usage: $(basename "$0") [OPTIONS]"
#     echo -e "\e[96mAdditional functonality to TaskWarrior's task\e[0m"
#     echo -e "For greater help, do task help"
#     for option in "${!option_descriptions[@]}"; do
#         printf "  ${GREEN}%-12s${NC} %s\n" "$option" "${option_descriptions[$option]}"
#     done
#     exit 0
# }

edit_code() {
    if [[ -n "$1" ]]
        then editor="$1"
        else editor="micro"
    fi
    "$editor" "$0"
    exit "$?"
}

push_to_github() {
    git -C $target add .
    git -C $target commit -m "'$*'" > /dev/null
    git -C $target push
    exit "$?"
}

save_cmd() {
  tmp=$(mktemp)
}

synchronize() {
    output=$(git -C "$DOMAIN" pull --rebase)
    # Check if the output contains "Already up to date."
    if [[ "$output" == "Already up to date." ]]; then
        # warn "Already up to date. Pushing changes..."
        push_to_github "Sent from $NAME"
    else
        echo "Changes found. Was pull successful\?"
    fi
}

terminate() {
  set_expiring_tasks
}

warn() { echo -e "\e[33m$@\e[0m"; }

# pass comands to TaskWarrior
main "$@"
